# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        # creating a new linked list to store the two sorted lists
        head = ListNode()
        current = head
        while list1 != None and list2 != None:# while there are still values to compare
        # add the smaller value to the new linked list and move the corresponding pointer
            if list1.val < list2.val:
                current.next = list1
                list1 = list1.next
            else:
                current.next = list2
                list2 = list2.next
            current = current.next# move onto next empty spot for new linked list
        # for the remaining linked list; dump all of it's values into the new linked list
        while list1 != None:
            current.next = list1
            list1 = list1.next
            current = current.next
        while list2 != None:
            current.next = list2
            list2 = list2.next
            current = current.next
        return head.next
