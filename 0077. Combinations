class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        ### recursive solution####
        answer = []# a list to store all of the possible combinations
        def recursion(start, current):# pass variables in here
        # base case if when the length of the array is = k; then return
            if len(current) == k:
                answer.append(current[:])
                return
            if len(current) != 0 and current[-1]  == n:# invalid as last element is the max possible number; but len(current) will never reach k
                return
            for i in range(start + 1, n + 1):# we only want to increment to avoid duplicates
                current.append(i)
                recursion(current[-1], current)
                current.pop()# backtrack
        recursion(0, [])
        return answer

        
        ### using built in functions#################
        #( this is much faster than my recursive approach)
        import itertools
        l1 = []
        for i in range(1, n + 1):
            l1.append(i)
        l2 = itertools.combinations(l1,k)
        return l2
