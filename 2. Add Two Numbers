# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        carry = 0# carry bit
        l3 = ListNode()# creating a node
        current = l3
        while (l1 != None or l2 != None):# while the end of both of the two linked lists are not reached
            if l1 != None and l2 != None:# there are values to add together
                value = carry + l1.val + l2.val# total value of the numbers and the carry bit added together
                carry  = value // 10# if it's above 10; it turns into a carry bit
                # moves onto ther next digits
                l1 = l1.next
                l2 = l2.next

            elif l1 == None:# linked list 1 is empty; therefore only focus on linked list 2 and carry
                value = carry + l2.val
                carry  = value // 10
                l2 = l2.next
            else:# linked list 2 is empty
                value = carry + l1.val
                carry  = value // 10
                l1 = l1.next
            current.next = ListNode(value % 10)# since each node can only sotre one digit; just store the remainder
            current = current.next
        if carry != 0:# carry bit still exits
            current.next = ListNode(carry)
            carry = carry // 10
        return l3.next
        
