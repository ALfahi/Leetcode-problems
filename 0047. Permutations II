lass Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ### try a recursive solution ####
        nums.sort()# sort nums to easily skip duplicates
        answer = []
        def backtrack(current, copy ):
            if len(copy) == 0:# we have exaughsted the coppy array which means that we found a valdi permuatation
                answer.append(current[:])
                return

            for i in range(len(copy)):
                if i > 0 and copy[i] == copy[i - 1]:  # Skip duplicates to calculate duplicate permuatations
                    continue
                current.append(copy[i])
                value = copy.pop(i)
                backtrack(current, copy)
                current.pop()# backtrack
                copy.insert(i, value)# add value back in for backtracking
        backtrack([], nums[:])
        return answer
