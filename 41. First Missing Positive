class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # does not run in O(1) Auxilary space, but rest of contraints are met
        hash = {}# using a dictionary because it's O(1) to search up for items; rather than an array
        for i in range(0, len(nums)):
            if nums[i] >0 and nums[i] < len(nums) + 1:# smallest postive missing number should be between 1 and the length of arrray + 1( in case if there is no missing number in the array)
                hash[nums[i]] = False# create a new hash key
        for i in range(1, len(nums) + 1):# count from 1 to len(nums) + 1
            if hash.get(i) == None:# if i is not a key; it means that i was not in array(to be put into hash) and is the smallest positive number 
                return i
        return len(nums) + 1# all of the lements in the array included all of the positive numbers without any missing gaps; therefore smallesrt positive number is the one right after( length of array + 1
